{"message":"the trait bound `<T as module::Config>::Balance: num_traits::ops::saturating::Saturating` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":15174,"byte_end":15200,"line_start":471,"line_end":471,"column_start":2,"column_end":28,"is_primary":true,"text":[{"text":"\ttype Balance = T::Balance;","highlight_start":2,"highlight_end":28}],"label":"the trait `num_traits::ops::saturating::Saturating` is not implemented for `<T as module::Config>::Balance`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":"required by a bound in this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/traits/src/currency.rs","byte_start":583,"byte_end":603,"line_start":21,"line_end":21,"column_start":16,"column_end":36,"is_primary":false,"text":[{"text":"\ttype Balance: AtLeast32BitUnsigned + FullCodec + Copy + MaybeSerializeDeserialize + Debug + Default;","highlight_start":16,"highlight_end":36}],"label":"required by this bound in `orml_traits::MultiCurrency::Balance`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required because of the requirements on the impl of `sp_arithmetic::traits::Saturating` for `<T as module::Config>::Balance`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider further restricting the associated type","code":null,"level":"help","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":15136,"byte_end":15136,"line_start":469,"line_end":469,"column_start":58,"column_end":58,"is_primary":true,"text":[{"text":"impl<T: Config> MultiCurrency<T::AccountId> for Pallet<T> {","highlight_start":58,"highlight_end":58}],"label":null,"suggested_replacement":" where <T as module::Config>::Balance: num_traits::ops::saturating::Saturating","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `<T as module::Config>::Balance: num_traits::ops::saturating::Saturating` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:471:2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    type Balance = T::Balance;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `num_traits::ops::saturating::Saturating` is not implemented for `<T as module::Config>::Balance`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/traits/src/currency.rs:21:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    type Balance: AtLeast32BitUnsigned + FullCodec + Copy + MaybeSerializeDeserialize + Debug + Default;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by this bound in `orml_traits::MultiCurrency::Balance`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `sp_arithmetic::traits::Saturating` for `<T as module::Config>::Balance`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider further restricting the associated type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m469\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<T: Config> MultiCurrency<T::AccountId> for Pallet<T> where <T as module::Config>::Balance: num_traits::ops::saturating::Saturating {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"method `ensure_can_withdraw` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":15892,"byte_end":16006,"line_start":492,"line_end":492,"column_start":2,"column_end":116,"is_primary":true,"text":[{"text":"\tfn ensure_can_withdraw(currency_id: Self::CurrencyId, who: &T::AccountId, amount: Self::Balance) -> DispatchResult {","highlight_start":2,"highlight_end":116}],"label":"expected enum `sp_runtime::DispatchError`, found enum `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(_, &<T as frame_system::Config>::AccountId, _) -> Result<_, sp_runtime::DispatchError>`\n   found fn pointer `fn(_, &<T as frame_system::Config>::AccountId, _) -> Result<_, DispatchError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `sp_runtime` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `ensure_can_withdraw` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:492:2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m492\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn ensure_can_withdraw(currency_id: Self::CurrencyId, who: &T::AccountId, amount: Self::Balance) -> DispatchResult {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `sp_runtime::DispatchError`, found enum `DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(_, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _) -> Result<_, \u001b[0m\u001b[0m\u001b[1msp_runtime::DispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found fn pointer `fn(_, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _) -> Result<_, \u001b[0m\u001b[0m\u001b[1mDispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `sp_runtime` are being used?\u001b[0m\n\n"}
{"message":"method `transfer` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":16449,"byte_end":17077,"line_start":510,"line_end":530,"column_start":2,"column_end":3,"is_primary":true,"text":[{"text":"\tfn transfer(","highlight_start":2,"highlight_end":14},{"text":"\t\tcurrency_id: Self::CurrencyId,","highlight_start":1,"highlight_end":33},{"text":"\t\tfrom: &T::AccountId,","highlight_start":1,"highlight_end":23},{"text":"\t\tto: &T::AccountId,","highlight_start":1,"highlight_end":21},{"text":"\t\tamount: Self::Balance,","highlight_start":1,"highlight_end":25},{"text":"\t) -> DispatchResult {","highlight_start":1,"highlight_end":23},{"text":"\t\tif amount.is_zero() || from == to {","highlight_start":1,"highlight_end":38},{"text":"\t\t\treturn Ok(());","highlight_start":1,"highlight_end":18},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\tSelf::ensure_can_withdraw(currency_id, from, amount)?;","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tlet from_balance = Self::free_balance(currency_id, from);","highlight_start":1,"highlight_end":60},{"text":"\t\tlet to_balance = Self::free_balance(currency_id, to)","highlight_start":1,"highlight_end":55},{"text":"\t\t\t.checked_add(&amount)","highlight_start":1,"highlight_end":25},{"text":"\t\t\t.ok_or(Error::<T>::BalanceOverflow)?;","highlight_start":1,"highlight_end":41},{"text":"\t\t// Cannot underflow because ensure_can_withdraw check","highlight_start":1,"highlight_end":56},{"text":"\t\tSelf::set_free_balance(currency_id, from, from_balance - amount);","highlight_start":1,"highlight_end":68},{"text":"\t\tSelf::set_free_balance(currency_id, to, to_balance);","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tOk(())","highlight_start":1,"highlight_end":9},{"text":"\t}","highlight_start":1,"highlight_end":3}],"label":"expected enum `sp_runtime::DispatchError`, found enum `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(_, &<T as frame_system::Config>::AccountId, &<T as frame_system::Config>::AccountId, _) -> Result<_, sp_runtime::DispatchError>`\n   found fn pointer `fn(_, &<T as frame_system::Config>::AccountId, &<T as frame_system::Config>::AccountId, _) -> Result<_, DispatchError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `sp_runtime` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `transfer` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:510:2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m510\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn transfer(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        currency_id: Self::CurrencyId,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        from: &T::AccountId,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m513\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        to: &T::AccountId,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `sp_runtime::DispatchError`, found enum `DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(_, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _) -> Result<_, \u001b[0m\u001b[0m\u001b[1msp_runtime::DispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found fn pointer `fn(_, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _) -> Result<_, \u001b[0m\u001b[0m\u001b[1mDispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `sp_runtime` are being used?\u001b[0m\n\n"}
{"message":"method `deposit` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":17209,"byte_end":17311,"line_start":535,"line_end":535,"column_start":2,"column_end":104,"is_primary":true,"text":[{"text":"\tfn deposit(currency_id: Self::CurrencyId, who: &T::AccountId, amount: Self::Balance) -> DispatchResult {","highlight_start":2,"highlight_end":104}],"label":"expected enum `sp_runtime::DispatchError`, found enum `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(_, &<T as frame_system::Config>::AccountId, _) -> Result<_, sp_runtime::DispatchError>`\n   found fn pointer `fn(_, &<T as frame_system::Config>::AccountId, _) -> Result<_, DispatchError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `sp_runtime` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `deposit` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:535:2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m535\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn deposit(currency_id: Self::CurrencyId, who: &T::AccountId, amount: Self::Balance) -> DispatchResult {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `sp_runtime::DispatchError`, found enum `DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(_, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _) -> Result<_, \u001b[0m\u001b[0m\u001b[1msp_runtime::DispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found fn pointer `fn(_, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _) -> Result<_, \u001b[0m\u001b[0m\u001b[1mDispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `sp_runtime` are being used?\u001b[0m\n\n"}
{"message":"method `withdraw` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":17668,"byte_end":17771,"line_start":551,"line_end":551,"column_start":2,"column_end":105,"is_primary":true,"text":[{"text":"\tfn withdraw(currency_id: Self::CurrencyId, who: &T::AccountId, amount: Self::Balance) -> DispatchResult {","highlight_start":2,"highlight_end":105}],"label":"expected enum `sp_runtime::DispatchError`, found enum `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(_, &<T as frame_system::Config>::AccountId, _) -> Result<_, sp_runtime::DispatchError>`\n   found fn pointer `fn(_, &<T as frame_system::Config>::AccountId, _) -> Result<_, DispatchError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `sp_runtime` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `withdraw` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:551:2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m551\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn withdraw(currency_id: Self::CurrencyId, who: &T::AccountId, amount: Self::Balance) -> DispatchResult {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `sp_runtime::DispatchError`, found enum `DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(_, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _) -> Result<_, \u001b[0m\u001b[0m\u001b[1msp_runtime::DispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found fn pointer `fn(_, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _) -> Result<_, \u001b[0m\u001b[0m\u001b[1mDispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `sp_runtime` are being used?\u001b[0m\n\n"}
{"message":"method `update_balance` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":20010,"byte_end":20121,"line_start":614,"line_end":614,"column_start":2,"column_end":113,"is_primary":true,"text":[{"text":"\tfn update_balance(currency_id: Self::CurrencyId, who: &T::AccountId, by_amount: Self::Amount) -> DispatchResult {","highlight_start":2,"highlight_end":113}],"label":"expected enum `sp_runtime::DispatchError`, found enum `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(_, &<T as frame_system::Config>::AccountId, _) -> Result<_, sp_runtime::DispatchError>`\n   found fn pointer `fn(_, &<T as frame_system::Config>::AccountId, _) -> Result<_, DispatchError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `sp_runtime` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `update_balance` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:614:2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m614\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn update_balance(currency_id: Self::CurrencyId, who: &T::AccountId, by_amount: Self::Amount) -> DispatchResult {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `sp_runtime::DispatchError`, found enum `DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(_, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _) -> Result<_, \u001b[0m\u001b[0m\u001b[1msp_runtime::DispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found fn pointer `fn(_, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _) -> Result<_, \u001b[0m\u001b[0m\u001b[1mDispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `sp_runtime` are being used?\u001b[0m\n\n"}
{"message":"method `set_lock` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":20910,"byte_end":21486,"line_start":642,"line_end":667,"column_start":2,"column_end":3,"is_primary":true,"text":[{"text":"\tfn set_lock(","highlight_start":2,"highlight_end":14},{"text":"\t\tlock_id: LockIdentifier,","highlight_start":1,"highlight_end":27},{"text":"\t\tcurrency_id: Self::CurrencyId,","highlight_start":1,"highlight_end":33},{"text":"\t\twho: &T::AccountId,","highlight_start":1,"highlight_end":22},{"text":"\t\tamount: Self::Balance,","highlight_start":1,"highlight_end":25},{"text":"\t) -> DispatchResult {","highlight_start":1,"highlight_end":23},{"text":"\t\tif amount.is_zero() {","highlight_start":1,"highlight_end":24},{"text":"\t\t\treturn Ok(());","highlight_start":1,"highlight_end":18},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\tlet mut new_lock = Some(BalanceLock { id: lock_id, amount });","highlight_start":1,"highlight_end":64},{"text":"\t\tlet mut locks = Self::locks(who, currency_id)","highlight_start":1,"highlight_end":48},{"text":"\t\t\t.into_iter()","highlight_start":1,"highlight_end":16},{"text":"\t\t\t.filter_map(|lock| {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tif lock.id == lock_id {","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tnew_lock.take()","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t} else {","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\tSome(lock)","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t})","highlight_start":1,"highlight_end":6},{"text":"\t\t\t.collect::<Vec<_>>();","highlight_start":1,"highlight_end":25},{"text":"\t\tif let Some(lock) = new_lock {","highlight_start":1,"highlight_end":33},{"text":"\t\t\tlocks.push(lock)","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\tSelf::update_locks(currency_id, who, &locks[..]);","highlight_start":1,"highlight_end":52},{"text":"\t\tOk(())","highlight_start":1,"highlight_end":9},{"text":"\t}","highlight_start":1,"highlight_end":3}],"label":"expected enum `sp_runtime::DispatchError`, found enum `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(_, _, &<T as frame_system::Config>::AccountId, _) -> Result<_, sp_runtime::DispatchError>`\n   found fn pointer `fn(_, _, &<T as frame_system::Config>::AccountId, _) -> Result<_, DispatchError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `sp_runtime` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `set_lock` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:642:2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m642\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn set_lock(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m643\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        lock_id: LockIdentifier,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        currency_id: Self::CurrencyId,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m645\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        who: &T::AccountId,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m666\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m667\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `sp_runtime::DispatchError`, found enum `DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(_, _, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _) -> Result<_, \u001b[0m\u001b[0m\u001b[1msp_runtime::DispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found fn pointer `fn(_, _, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _) -> Result<_, \u001b[0m\u001b[0m\u001b[1mDispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `sp_runtime` are being used?\u001b[0m\n\n"}
{"message":"method `extend_lock` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":21590,"byte_end":22261,"line_start":671,"line_end":699,"column_start":2,"column_end":3,"is_primary":true,"text":[{"text":"\tfn extend_lock(","highlight_start":2,"highlight_end":17},{"text":"\t\tlock_id: LockIdentifier,","highlight_start":1,"highlight_end":27},{"text":"\t\tcurrency_id: Self::CurrencyId,","highlight_start":1,"highlight_end":33},{"text":"\t\twho: &T::AccountId,","highlight_start":1,"highlight_end":22},{"text":"\t\tamount: Self::Balance,","highlight_start":1,"highlight_end":25},{"text":"\t) -> DispatchResult {","highlight_start":1,"highlight_end":23},{"text":"\t\tif amount.is_zero() {","highlight_start":1,"highlight_end":24},{"text":"\t\t\treturn Ok(());","highlight_start":1,"highlight_end":18},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\tlet mut new_lock = Some(BalanceLock { id: lock_id, amount });","highlight_start":1,"highlight_end":64},{"text":"\t\tlet mut locks = Self::locks(who, currency_id)","highlight_start":1,"highlight_end":48},{"text":"\t\t\t.into_iter()","highlight_start":1,"highlight_end":16},{"text":"\t\t\t.filter_map(|lock| {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tif lock.id == lock_id {","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tnew_lock.take().map(|nl| BalanceLock {","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\t\t\tid: lock.id,","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t\tamount: lock.amount.max(nl.amount),","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t\t})","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t} else {","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\tSome(lock)","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t})","highlight_start":1,"highlight_end":6},{"text":"\t\t\t.collect::<Vec<_>>();","highlight_start":1,"highlight_end":25},{"text":"\t\tif let Some(lock) = new_lock {","highlight_start":1,"highlight_end":33},{"text":"\t\t\tlocks.push(lock)","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\tSelf::update_locks(currency_id, who, &locks[..]);","highlight_start":1,"highlight_end":52},{"text":"\t\tOk(())","highlight_start":1,"highlight_end":9},{"text":"\t}","highlight_start":1,"highlight_end":3}],"label":"expected enum `sp_runtime::DispatchError`, found enum `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(_, _, &<T as frame_system::Config>::AccountId, _) -> Result<_, sp_runtime::DispatchError>`\n   found fn pointer `fn(_, _, &<T as frame_system::Config>::AccountId, _) -> Result<_, DispatchError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `sp_runtime` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `extend_lock` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:671:2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m671\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn extend_lock(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m672\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        lock_id: LockIdentifier,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m673\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        currency_id: Self::CurrencyId,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        who: &T::AccountId,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m698\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m699\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `sp_runtime::DispatchError`, found enum `DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(_, _, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _) -> Result<_, \u001b[0m\u001b[0m\u001b[1msp_runtime::DispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found fn pointer `fn(_, _, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _) -> Result<_, \u001b[0m\u001b[0m\u001b[1mDispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `sp_runtime` are being used?\u001b[0m\n\n"}
{"message":"method `remove_lock` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":22264,"byte_end":22372,"line_start":701,"line_end":701,"column_start":2,"column_end":110,"is_primary":true,"text":[{"text":"\tfn remove_lock(lock_id: LockIdentifier, currency_id: Self::CurrencyId, who: &T::AccountId) -> DispatchResult {","highlight_start":2,"highlight_end":110}],"label":"expected enum `sp_runtime::DispatchError`, found enum `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(_, _, &<T as frame_system::Config>::AccountId) -> Result<_, sp_runtime::DispatchError>`\n   found fn pointer `fn(_, _, &<T as frame_system::Config>::AccountId) -> Result<_, DispatchError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `sp_runtime` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `remove_lock` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:701:2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m701\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn remove_lock(lock_id: LockIdentifier, currency_id: Self::CurrencyId, who: &T::AccountId) -> DispatchResult {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `sp_runtime::DispatchError`, found enum `DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(_, _, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId) -> Result<_, \u001b[0m\u001b[0m\u001b[1msp_runtime::DispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found fn pointer `fn(_, _, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId) -> Result<_, \u001b[0m\u001b[0m\u001b[1mDispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `sp_runtime` are being used?\u001b[0m\n\n"}
{"message":"method `reserve` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":23782,"byte_end":23883,"line_start":744,"line_end":744,"column_start":2,"column_end":103,"is_primary":true,"text":[{"text":"\tfn reserve(currency_id: Self::CurrencyId, who: &T::AccountId, value: Self::Balance) -> DispatchResult {","highlight_start":2,"highlight_end":103}],"label":"expected enum `sp_runtime::DispatchError`, found enum `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(_, &<T as frame_system::Config>::AccountId, _) -> Result<_, sp_runtime::DispatchError>`\n   found fn pointer `fn(_, &<T as frame_system::Config>::AccountId, _) -> Result<_, DispatchError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `sp_runtime` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `reserve` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:744:2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m744\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn reserve(currency_id: Self::CurrencyId, who: &T::AccountId, value: Self::Balance) -> DispatchResult {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `sp_runtime::DispatchError`, found enum `DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(_, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _) -> Result<_, \u001b[0m\u001b[0m\u001b[1msp_runtime::DispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found fn pointer `fn(_, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _) -> Result<_, \u001b[0m\u001b[0m\u001b[1mDispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `sp_runtime` are being used?\u001b[0m\n\n"}
{"message":"method `repatriate_reserved` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":25123,"byte_end":26176,"line_start":782,"line_end":813,"column_start":2,"column_end":3,"is_primary":true,"text":[{"text":"\tfn repatriate_reserved(","highlight_start":2,"highlight_end":25},{"text":"\t\tcurrency_id: Self::CurrencyId,","highlight_start":1,"highlight_end":33},{"text":"\t\tslashed: &T::AccountId,","highlight_start":1,"highlight_end":26},{"text":"\t\tbeneficiary: &T::AccountId,","highlight_start":1,"highlight_end":30},{"text":"\t\tvalue: Self::Balance,","highlight_start":1,"highlight_end":24},{"text":"\t\tstatus: BalanceStatus,","highlight_start":1,"highlight_end":25},{"text":"\t) -> sp_std::result::Result<Self::Balance, DispatchError> {","highlight_start":1,"highlight_end":61},{"text":"\t\tif value.is_zero() {","highlight_start":1,"highlight_end":23},{"text":"\t\t\treturn Ok(value);","highlight_start":1,"highlight_end":21},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tif slashed == beneficiary {","highlight_start":1,"highlight_end":30},{"text":"\t\t\treturn match status {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\tBalanceStatus::Free => Ok(Self::unreserve(currency_id, slashed, value)),","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tBalanceStatus::Reserved => Ok(value.saturating_sub(Self::reserved_balance(currency_id, slashed))),","highlight_start":1,"highlight_end":103},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tlet from_account = Self::accounts(slashed, currency_id);","highlight_start":1,"highlight_end":59},{"text":"\t\tlet to_account = Self::accounts(beneficiary, currency_id);","highlight_start":1,"highlight_end":61},{"text":"\t\tlet actual = from_account.reserved.min(value);","highlight_start":1,"highlight_end":49},{"text":"\t\tmatch status {","highlight_start":1,"highlight_end":17},{"text":"\t\t\tBalanceStatus::Free => {","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\tSelf::set_free_balance(currency_id, beneficiary, to_account.free + actual);","highlight_start":1,"highlight_end":80},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tBalanceStatus::Reserved => {","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\tSelf::set_reserved_balance(currency_id, beneficiary, to_account.reserved + actual);","highlight_start":1,"highlight_end":88},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\tSelf::set_reserved_balance(currency_id, slashed, from_account.reserved - actual);","highlight_start":1,"highlight_end":84},{"text":"\t\tOk(value - actual)","highlight_start":1,"highlight_end":21},{"text":"\t}","highlight_start":1,"highlight_end":3}],"label":"expected enum `sp_runtime::DispatchError`, found enum `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(_, &<T as frame_system::Config>::AccountId, &<T as frame_system::Config>::AccountId, _, orml_traits::BalanceStatus) -> Result<_, sp_runtime::DispatchError>`\n   found fn pointer `fn(_, &<T as frame_system::Config>::AccountId, &<T as frame_system::Config>::AccountId, _, orml_traits::BalanceStatus) -> Result<_, DispatchError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `sp_runtime` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `repatriate_reserved` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:782:2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m782\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn repatriate_reserved(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m783\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        currency_id: Self::CurrencyId,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m784\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        slashed: &T::AccountId,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m785\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        beneficiary: &T::AccountId,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m812\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(value - actual)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m813\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `sp_runtime::DispatchError`, found enum `DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(_, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _, orml_traits::BalanceStatus) -> Result<_, \u001b[0m\u001b[0m\u001b[1msp_runtime::DispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found fn pointer `fn(_, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, _, orml_traits::BalanceStatus) -> Result<_, \u001b[0m\u001b[0m\u001b[1mDispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `sp_runtime` are being used?\u001b[0m\n\n"}
{"message":"method `merge_account` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":33889,"byte_end":33905,"line_start":1046,"line_end":1046,"column_start":2,"column_end":18,"is_primary":true,"text":[{"text":"\t#[transactional]","highlight_start":2,"highlight_end":18}],"label":"expected enum `sp_runtime::DispatchError`, found enum `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":33889,"byte_end":33905,"line_start":1046,"line_end":1046,"column_start":2,"column_end":18,"is_primary":false,"text":[{"text":"\t#[transactional]","highlight_start":2,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[transactional]","def_site_span":{"file_name":"/home/knoldus/.cargo/git/checkouts/substrate-7e08433d4c370a21/20b1a0e/frame/support/procedural/src/lib.rs","byte_start":13714,"byte_end":13788,"line_start":343,"line_end":343,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"pub fn transactional(attr: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected fn pointer `fn(&<T as frame_system::Config>::AccountId, &<T as frame_system::Config>::AccountId) -> Result<_, sp_runtime::DispatchError>`\n   found fn pointer `fn(&<T as frame_system::Config>::AccountId, &<T as frame_system::Config>::AccountId) -> Result<_, DispatchError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `sp_runtime` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `merge_account` has an incompatible type for trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:1046:2\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1046\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    #[transactional]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `sp_runtime::DispatchError`, found enum `DispatchError`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId) -> Result<_, \u001b[0m\u001b[0m\u001b[1msp_runtime::DispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                found fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId, \u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0m<T as frame_system::Config>::AccountId) -> Result<_, \u001b[0m\u001b[0m\u001b[1mDispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `sp_runtime` are being used?\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`?` couldn't convert the error to `DispatchError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":10036,"byte_end":10037,"line_start":321,"line_end":321,"column_start":73,"column_end":74,"is_primary":true,"text":[{"text":"\t\t\t<Self as MultiCurrency<_>>::transfer(currency_id, &from, &to, amount)?;","highlight_start":73,"highlight_end":74}],"label":"the trait `From<sp_runtime::DispatchError>` is not implemented for `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":10036,"byte_end":10037,"line_start":321,"line_end":321,"column_start":73,"column_end":74,"is_primary":false,"text":[{"text":"\t\t\t<Self as MultiCurrency<_>>::transfer(currency_id, &from, &to, amount)?;","highlight_start":73,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following implementations were found:\n  <DispatchError as From<&'static str>>\n  <DispatchError as From<LookupError>>\n  <DispatchError as From<StoredMapError>>\n  <DispatchError as From<TokenError>>\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `Into<DispatchError>` for `sp_runtime::DispatchError`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `From<sp_runtime::DispatchError>` for `DispatchErrorWithPostInfo<PostDispatchInfo>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `std::convert::From::from`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `DispatchError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:321:73\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m321\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            <Self as MultiCurrency<_>>::transfer(currency_id, &from, &to, amount)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<sp_runtime::DispatchError>` is not implemented for `DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <DispatchError as From<&'static str>>\u001b[0m\n\u001b[0m              <DispatchError as From<LookupError>>\u001b[0m\n\u001b[0m              <DispatchError as From<StoredMapError>>\u001b[0m\n\u001b[0m              <DispatchError as From<TokenError>>\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `Into<DispatchError>` for `sp_runtime::DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `From<sp_runtime::DispatchError>` for `DispatchErrorWithPostInfo<PostDispatchInfo>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::convert::From::from`\u001b[0m\n\n"}
{"message":"`?` couldn't convert the error to `DispatchError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":10746,"byte_end":10747,"line_start":340,"line_end":340,"column_start":85,"column_end":86,"is_primary":true,"text":[{"text":"\t\t\t<Self as MultiCurrency<T::AccountId>>::transfer(currency_id, &from, &to, balance)?;","highlight_start":85,"highlight_end":86}],"label":"the trait `From<sp_runtime::DispatchError>` is not implemented for `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":10746,"byte_end":10747,"line_start":340,"line_end":340,"column_start":85,"column_end":86,"is_primary":false,"text":[{"text":"\t\t\t<Self as MultiCurrency<T::AccountId>>::transfer(currency_id, &from, &to, balance)?;","highlight_start":85,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following implementations were found:\n  <DispatchError as From<&'static str>>\n  <DispatchError as From<LookupError>>\n  <DispatchError as From<StoredMapError>>\n  <DispatchError as From<TokenError>>\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `Into<DispatchError>` for `sp_runtime::DispatchError`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `From<sp_runtime::DispatchError>` for `DispatchErrorWithPostInfo<PostDispatchInfo>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `std::convert::From::from`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `DispatchError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:340:85\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m340\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            <Self as MultiCurrency<T::AccountId>>::transfer(currency_id, &from, &to, balance)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<sp_runtime::DispatchError>` is not implemented for `DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <DispatchError as From<&'static str>>\u001b[0m\n\u001b[0m              <DispatchError as From<LookupError>>\u001b[0m\n\u001b[0m              <DispatchError as From<StoredMapError>>\u001b[0m\n\u001b[0m              <DispatchError as From<TokenError>>\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `Into<DispatchError>` for `sp_runtime::DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `From<sp_runtime::DispatchError>` for `DispatchErrorWithPostInfo<PostDispatchInfo>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::convert::From::from`\u001b[0m\n\n"}
{"message":"`?` couldn't convert the error to `DispatchError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":16701,"byte_end":16702,"line_start":519,"line_end":519,"column_start":55,"column_end":56,"is_primary":true,"text":[{"text":"\t\tSelf::ensure_can_withdraw(currency_id, from, amount)?;","highlight_start":55,"highlight_end":56}],"label":"the trait `From<sp_runtime::DispatchError>` is not implemented for `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":16701,"byte_end":16702,"line_start":519,"line_end":519,"column_start":55,"column_end":56,"is_primary":false,"text":[{"text":"\t\tSelf::ensure_can_withdraw(currency_id, from, amount)?;","highlight_start":55,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following implementations were found:\n  <DispatchError as From<&'static str>>\n  <DispatchError as From<LookupError>>\n  <DispatchError as From<StoredMapError>>\n  <DispatchError as From<TokenError>>\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by `std::convert::From::from`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `DispatchError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:519:55\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Self::ensure_can_withdraw(currency_id, from, amount)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<sp_runtime::DispatchError>` is not implemented for `DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <DispatchError as From<&'static str>>\u001b[0m\n\u001b[0m              <DispatchError as From<LookupError>>\u001b[0m\n\u001b[0m              <DispatchError as From<StoredMapError>>\u001b[0m\n\u001b[0m              <DispatchError as From<TokenError>>\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::convert::From::from`\u001b[0m\n\n"}
{"message":"`?` couldn't convert the error to `DispatchError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":17873,"byte_end":17874,"line_start":555,"line_end":555,"column_start":54,"column_end":55,"is_primary":true,"text":[{"text":"\t\tSelf::ensure_can_withdraw(currency_id, who, amount)?;","highlight_start":54,"highlight_end":55}],"label":"the trait `From<sp_runtime::DispatchError>` is not implemented for `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":17873,"byte_end":17874,"line_start":555,"line_end":555,"column_start":54,"column_end":55,"is_primary":false,"text":[{"text":"\t\tSelf::ensure_can_withdraw(currency_id, who, amount)?;","highlight_start":54,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following implementations were found:\n  <DispatchError as From<&'static str>>\n  <DispatchError as From<LookupError>>\n  <DispatchError as From<StoredMapError>>\n  <DispatchError as From<TokenError>>\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by `std::convert::From::from`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `DispatchError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:555:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m555\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Self::ensure_can_withdraw(currency_id, who, amount)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<sp_runtime::DispatchError>` is not implemented for `DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <DispatchError as From<&'static str>>\u001b[0m\n\u001b[0m              <DispatchError as From<LookupError>>\u001b[0m\n\u001b[0m              <DispatchError as From<StoredMapError>>\u001b[0m\n\u001b[0m              <DispatchError as From<TokenError>>\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::convert::From::from`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":20585,"byte_end":20628,"line_start":630,"line_end":630,"column_start":4,"column_end":47,"is_primary":true,"text":[{"text":"\t\t\tSelf::deposit(currency_id, who, by_balance)","highlight_start":4,"highlight_end":47}],"label":"expected enum `DispatchError`, found enum `sp_runtime::DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":20107,"byte_end":20121,"line_start":614,"line_end":614,"column_start":99,"column_end":113,"is_primary":false,"text":[{"text":"\tfn update_balance(currency_id: Self::CurrencyId, who: &T::AccountId, by_amount: Self::Amount) -> DispatchResult {","highlight_start":99,"highlight_end":113}],"label":"expected `Result<(), DispatchError>` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `Result<_, DispatchError>`\n   found enum `Result<_, sp_runtime::DispatchError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `sp_runtime` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:630:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m614\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn update_balance(currency_id: Self::CurrencyId, who: &T::AccountId, by_amount: Self::Amount) -> DispatchResult {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `Result<(), DispatchError>` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m630\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Self::deposit(currency_id, who, by_balance)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `DispatchError`, found enum `sp_runtime::DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `Result<_, \u001b[0m\u001b[0m\u001b[1mDispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found enum `Result<_, \u001b[0m\u001b[0m\u001b[1msp_runtime::DispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `sp_runtime` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":20643,"byte_end":20699,"line_start":632,"line_end":632,"column_start":4,"column_end":60,"is_primary":true,"text":[{"text":"\t\t\tSelf::withdraw(currency_id, who, by_balance).map(|_| ())","highlight_start":4,"highlight_end":60}],"label":"expected enum `DispatchError`, found enum `sp_runtime::DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":20107,"byte_end":20121,"line_start":614,"line_end":614,"column_start":99,"column_end":113,"is_primary":false,"text":[{"text":"\tfn update_balance(currency_id: Self::CurrencyId, who: &T::AccountId, by_amount: Self::Amount) -> DispatchResult {","highlight_start":99,"highlight_end":113}],"label":"expected `Result<(), DispatchError>` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `Result<_, DispatchError>`\n   found enum `Result<_, sp_runtime::DispatchError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `sp_runtime` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:632:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m614\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn update_balance(currency_id: Self::CurrencyId, who: &T::AccountId, by_amount: Self::Amount) -> DispatchResult {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `Result<(), DispatchError>` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m632\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Self::withdraw(currency_id, who, by_balance).map(|_| ())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `DispatchError`, found enum `sp_runtime::DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `Result<_, \u001b[0m\u001b[0m\u001b[1mDispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found enum `Result<_, \u001b[0m\u001b[0m\u001b[1msp_runtime::DispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `sp_runtime` are being used?\u001b[0m\n\n"}
{"message":"`?` couldn't convert the error to `DispatchError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":23983,"byte_end":23984,"line_start":748,"line_end":748,"column_start":53,"column_end":54,"is_primary":true,"text":[{"text":"\t\tSelf::ensure_can_withdraw(currency_id, who, value)?;","highlight_start":53,"highlight_end":54}],"label":"the trait `From<sp_runtime::DispatchError>` is not implemented for `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":23983,"byte_end":23984,"line_start":748,"line_end":748,"column_start":53,"column_end":54,"is_primary":false,"text":[{"text":"\t\tSelf::ensure_can_withdraw(currency_id, who, value)?;","highlight_start":53,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following implementations were found:\n  <DispatchError as From<&'static str>>\n  <DispatchError as From<LookupError>>\n  <DispatchError as From<StoredMapError>>\n  <DispatchError as From<TokenError>>\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by `std::convert::From::from`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `DispatchError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:748:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m748\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Self::ensure_can_withdraw(currency_id, who, value)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<sp_runtime::DispatchError>` is not implemented for `DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <DispatchError as From<&'static str>>\u001b[0m\n\u001b[0m              <DispatchError as From<LookupError>>\u001b[0m\n\u001b[0m              <DispatchError as From<StoredMapError>>\u001b[0m\n\u001b[0m              <DispatchError as From<TokenError>>\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::convert::From::from`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":28008,"byte_end":28075,"line_start":879,"line_end":879,"column_start":3,"column_end":70,"is_primary":true,"text":[{"text":"\t\tPallet::<T>::ensure_can_withdraw(GetCurrencyId::get(), who, amount)","highlight_start":3,"highlight_end":70}],"label":"expected enum `DispatchError`, found enum `sp_runtime::DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":27989,"byte_end":28003,"line_start":878,"line_end":878,"column_start":7,"column_end":21,"is_primary":false,"text":[{"text":"\t) -> DispatchResult {","highlight_start":7,"highlight_end":21}],"label":"expected `Result<(), DispatchError>` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `Result<_, DispatchError>`\n   found enum `Result<_, sp_runtime::DispatchError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `sp_runtime` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:879:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m878\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    ) -> DispatchResult {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `Result<(), DispatchError>` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m879\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Pallet::<T>::ensure_can_withdraw(GetCurrencyId::get(), who, amount)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `DispatchError`, found enum `sp_runtime::DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `Result<_, \u001b[0m\u001b[0m\u001b[1mDispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found enum `Result<_, \u001b[0m\u001b[0m\u001b[1msp_runtime::DispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `sp_runtime` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":28239,"byte_end":28336,"line_start":888,"line_end":888,"column_start":3,"column_end":100,"is_primary":true,"text":[{"text":"\t\t<Pallet<T> as MultiCurrency<T::AccountId>>::transfer(GetCurrencyId::get(), &source, &dest, value)","highlight_start":3,"highlight_end":100}],"label":"expected enum `DispatchError`, found enum `sp_runtime::DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":28220,"byte_end":28234,"line_start":887,"line_end":887,"column_start":7,"column_end":21,"is_primary":false,"text":[{"text":"\t) -> DispatchResult {","highlight_start":7,"highlight_end":21}],"label":"expected `Result<(), DispatchError>` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `Result<_, DispatchError>`\n   found enum `Result<_, sp_runtime::DispatchError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `sp_runtime` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:888:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m887\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    ) -> DispatchResult {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `Result<(), DispatchError>` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m888\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        <Pallet<T> as MultiCurrency<T::AccountId>>::transfer(GetCurrencyId::get(), &source, &dest, value)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `DispatchError`, found enum `sp_runtime::DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `Result<_, \u001b[0m\u001b[0m\u001b[1mDispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found enum `Result<_, \u001b[0m\u001b[0m\u001b[1msp_runtime::DispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `sp_runtime` are being used?\u001b[0m\n\n"}
{"message":"`?` couldn't convert the error to `DispatchError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":30416,"byte_end":30417,"line_start":950,"line_end":950,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"\t\tPallet::<T>::ensure_can_withdraw(currency_id, who, value)?;","highlight_start":60,"highlight_end":61}],"label":"the trait `From<sp_runtime::DispatchError>` is not implemented for `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":30416,"byte_end":30417,"line_start":950,"line_end":950,"column_start":60,"column_end":61,"is_primary":false,"text":[{"text":"\t\tPallet::<T>::ensure_can_withdraw(currency_id, who, value)?;","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following implementations were found:\n  <DispatchError as From<&'static str>>\n  <DispatchError as From<LookupError>>\n  <DispatchError as From<StoredMapError>>\n  <DispatchError as From<TokenError>>\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by `std::convert::From::from`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `DispatchError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:950:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m950\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Pallet::<T>::ensure_can_withdraw(currency_id, who, value)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<sp_runtime::DispatchError>` is not implemented for `DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <DispatchError as From<&'static str>>\u001b[0m\n\u001b[0m              <DispatchError as From<LookupError>>\u001b[0m\n\u001b[0m              <DispatchError as From<StoredMapError>>\u001b[0m\n\u001b[0m              <DispatchError as From<TokenError>>\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::convert::From::from`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":32642,"byte_end":32696,"line_start":1007,"line_end":1007,"column_start":3,"column_end":57,"is_primary":true,"text":[{"text":"\t\tPallet::<T>::reserve(GetCurrencyId::get(), who, value)","highlight_start":3,"highlight_end":57}],"label":"expected enum `DispatchError`, found enum `sp_runtime::DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":32623,"byte_end":32637,"line_start":1006,"line_end":1006,"column_start":58,"column_end":72,"is_primary":false,"text":[{"text":"\tfn reserve(who: &T::AccountId, value: Self::Balance) -> DispatchResult {","highlight_start":58,"highlight_end":72}],"label":"expected `Result<(), DispatchError>` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `Result<_, DispatchError>`\n   found enum `Result<_, sp_runtime::DispatchError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `sp_runtime` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:1007:3\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1006\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn reserve(who: &T::AccountId, value: Self::Balance) -> DispatchResult {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `Result<(), DispatchError>` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Pallet::<T>::reserve(GetCurrencyId::get(), who, value)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `DispatchError`, found enum `sp_runtime::DispatchError`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `Result<_, \u001b[0m\u001b[0m\u001b[1mDispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                found enum `Result<_, \u001b[0m\u001b[0m\u001b[1msp_runtime::DispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `sp_runtime` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":33109,"byte_end":33115,"line_start":1020,"line_end":1020,"column_start":87,"column_end":93,"is_primary":true,"text":[{"text":"\t\tPallet::<T>::repatriate_reserved(GetCurrencyId::get(), slashed, beneficiary, value, status)","highlight_start":87,"highlight_end":93}],"label":"expected enum `orml_traits::BalanceStatus`, found enum `frame_support::traits::BalanceStatus`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `frame_support` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:1020:87\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1020\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Pallet::<T>::repatriate_reserved(GetCurrencyId::get(), slashed, beneficiary, value, status)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `orml_traits::BalanceStatus`, found enum `frame_support::traits::BalanceStatus`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `frame_support` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":33025,"byte_end":33116,"line_start":1020,"line_end":1020,"column_start":3,"column_end":94,"is_primary":true,"text":[{"text":"\t\tPallet::<T>::repatriate_reserved(GetCurrencyId::get(), slashed, beneficiary, value, status)","highlight_start":3,"highlight_end":94}],"label":"expected enum `DispatchError`, found enum `sp_runtime::DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":32968,"byte_end":33020,"line_start":1019,"line_end":1019,"column_start":7,"column_end":59,"is_primary":false,"text":[{"text":"\t) -> sp_std::result::Result<Self::Balance, DispatchError> {","highlight_start":7,"highlight_end":59}],"label":"expected `Result<<T as module::Config>::Balance, DispatchError>` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `Result<_, DispatchError>`\n   found enum `Result<_, sp_runtime::DispatchError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `sp_runtime` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:1020:3\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1019\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    ) -> sp_std::result::Result<Self::Balance, DispatchError> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `Result<<T as module::Config>::Balance, DispatchError>` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1020\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Pallet::<T>::repatriate_reserved(GetCurrencyId::get(), slashed, beneficiary, value, status)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `DispatchError`, found enum `sp_runtime::DispatchError`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `Result<_, \u001b[0m\u001b[0m\u001b[1mDispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                found enum `Result<_, \u001b[0m\u001b[0m\u001b[1msp_runtime::DispatchError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `sp_runtime` are being used?\u001b[0m\n\n"}
{"message":"`?` couldn't convert the error to `DispatchError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":34371,"byte_end":34372,"line_start":1053,"line_end":1053,"column_start":97,"column_end":98,"is_primary":true,"text":[{"text":"\t\t\t<Self as MultiCurrency<T::AccountId>>::transfer(currency_id, source, dest, account_data.free)?;","highlight_start":97,"highlight_end":98}],"label":"the trait `From<sp_runtime::DispatchError>` is not implemented for `DispatchError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":34371,"byte_end":34372,"line_start":1053,"line_end":1053,"column_start":97,"column_end":98,"is_primary":false,"text":[{"text":"\t\t\t<Self as MultiCurrency<T::AccountId>>::transfer(currency_id, source, dest, account_data.free)?;","highlight_start":97,"highlight_end":98}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following implementations were found:\n  <DispatchError as From<&'static str>>\n  <DispatchError as From<LookupError>>\n  <DispatchError as From<StoredMapError>>\n  <DispatchError as From<TokenError>>\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by `std::convert::From::from`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `DispatchError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/knoldus/.cargo/git/checkouts/open-runtime-module-library-d9d5e297fcc9ade1/2a62d2c/tokens/src/lib.rs:1053:97\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1053\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            <Self as MultiCurrency<T::AccountId>>::transfer(currency_id, source, dest, account_data.free)?;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<sp_runtime::DispatchError>` is not implemented for `DispatchError`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m               <DispatchError as From<&'static str>>\u001b[0m\n\u001b[0m               <DispatchError as From<LookupError>>\u001b[0m\n\u001b[0m               <DispatchError as From<StoredMapError>>\u001b[0m\n\u001b[0m               <DispatchError as From<TokenError>>\u001b[0m\n\u001b[0m             and 3 others\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::convert::From::from`\u001b[0m\n\n"}
{"message":"aborting due to 26 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 26 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0053, E0277, E0308.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0053, E0277, E0308.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0053`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0053`.\u001b[0m\n"}
